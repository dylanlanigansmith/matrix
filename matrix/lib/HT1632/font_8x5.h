/*
 * A nice 8-Height font with variable width up to 5 pixels.
 * Most characters are in the top 7 pixels, and the bottom pixel is used sparingly.
 * This makes an attractive vertical spacing for two-line displays.
 * 
 * The font is the work of Pawel A Hernik, from fonts.h in:
 *      "MAX7219 functions by Pawel A. Hernik"
 * Found in hareeshmu's ESP Matrix Pixel Clock project here:
 *      https://github.com/hareeshmu/ESP-Matrix-Pixel-Clock/blob/master/max7219.h
 *
 * Reformatted and inverted for use with HT1632 by Steve Haehnichen 2018-06-27
 */
#ifndef __FONT8X5_H
#define __FONT8X5_H

#define FONT_8X5_HEIGHT  8

const byte FONT_8X5 [] PROGMEM = {
  0b00000000,                                                 // space
  0b11111010,                                                 // !
  0b11000000, 0b00000000, 0b11000000,                         // "
  0b00101000, 0b01111100, 0b00101000, 0b01111100, 0b00101000, // #
  0b00100100, 0b01010110, 0b11010100, 0b01001000,             // $
  0b11000110, 0b11001000, 0b00010000, 0b00100110, 0b11000110, // %
  0b01101100, 0b10010010, 0b01101010, 0b00000100, 0b00001010, // &
  0b11000000,                                                 // '

  0b00111000, 0b01000100, 0b10000010,                         // (
  0b10000010, 0b01000100, 0b00111000,                         // )
  0b00010100, 0b00011000, 0b01110000, 0b00011000, 0b00010100, // *
  0b00010000, 0b00010000, 0b01111100, 0b00010000, 0b00010000, // +
  0b00001101, 0b00001110,                                     // ,
  0b00010000, 0b00010000, 0b00010000, 0b00010000,             // -
  0b00000010,                                                 // .
  0b00000110, 0b00111000, 0b11000000,                         // /

  0b01111100, 0b10000010, 0b10000010, 0b01111100, // 0
  0b01000010, 0b11111110, 0b00000010,             // 1
  0b01000110, 0b10001010, 0b10010010, 0b01100010, // 2
  0b01000100, 0b10000010, 0b10010010, 0b01101100, // 3
  0b00011000, 0b00101000, 0b01001000, 0b11111110, // 4
  0b11100100, 0b10100010, 0b10100010, 0b10011100, // 5
  0b01111100, 0b10010010, 0b10010010, 0b01001100, // 6
  0b10000110, 0b10001000, 0b10010000, 0b11100000, // 7

  0b01101100, 0b10010010, 0b10010010, 0b01101100, // 8
  0b01100100, 0b10010010, 0b10010010, 0b01111100, // 9
  0b00100010,                                     // :
  0b00000001, 0b00001010,                         // ;
  0b00001000, 0b00010100, 0b00100010,             // <
  0b00101000, 0b00101000, 0b00101000,             // =
  0b00100010, 0b00010100, 0b00001000,             // >
  0b01000000, 0b10011010, 0b10010000, 0b01100000, // ?

  0b01111100, 0b10010010, 0b10101010, 0b10111010, 0b01110000, // @
  0b01111110, 0b10001000, 0b10001000, 0b01111110,             // A
  0b11111110, 0b10010010, 0b10010010, 0b01101100,             // B
  0b01111100, 0b10000010, 0b10000010, 0b01000100,             // C
  0b11111110, 0b10000010, 0b10000010, 0b01111100,             // D
  0b11111110, 0b10010010, 0b10010010, 0b10000010,             // E
  0b11111110, 0b10010000, 0b10010000, 0b10000000,             // F
  0b01111100, 0b10000010, 0b10010010, 0b01011110,             // G

  0b11111110, 0b00010000, 0b00010000, 0b11111110,             // H
  0b10000010, 0b11111110, 0b10000010,                         // I
  0b00001100, 0b00000010, 0b10000010, 0b11111100,             // J
  0b11111110, 0b00010000, 0b00101000, 0b11000110,             // K
  0b11111110, 0b00000010, 0b00000010, 0b00000010,             // L
  0b11111110, 0b01000000, 0b00110000, 0b01000000, 0b11111110, // M
  0b11111110, 0b00100000, 0b00010000, 0b00001000, 0b11111110, // N
  0b01111100, 0b10000010, 0b10000010, 0b01111100,             // O

  0b11111110, 0b10010000, 0b10010000, 0b01100000,             // P
  0b01111100, 0b10000010, 0b10000010, 0b01111101,             // Q
  0b11111110, 0b10010000, 0b10010000, 0b01101110,             // R
  0b01100100, 0b10010010, 0b10010010, 0b01001100,             // S
  0b10000000, 0b10000000, 0b11111110, 0b10000000, 0b10000000, // T
  0b11111100, 0b00000010, 0b00000010, 0b11111100,             // U
  0b11110000, 0b00001100, 0b00000010, 0b00001100, 0b11110000, // V
  0b11111100, 0b00000010, 0b00011100, 0b00000010, 0b11111100, // W

  0b11000110, 0b00101000, 0b00010000, 0b00101000, 0b11000110, // X
  0b11100000, 0b00010000, 0b00001110, 0b00010000, 0b11100000, // Y
  0b10000110, 0b10001010, 0b10010010, 0b11100010,             // Z
  0b11111110, 0b10000010,                                     // [
  0b10000000, 0b01100000, 0b00011000, 0b00000110,             // \ 
  0b10000010, 0b11111110,                                     // ]
  0b01000000, 0b10000000, 0b01000000,                         // ^
  0b00000010, 0b00000010, 0b00000010, 0b00000010,             // _
};

// Offsets generated by font_end_generate.html
int FONT_8X5_END [] =
{
 1,   2,   5,  10,  14,  19,  24,  25,
 28,  31,  36,  41,  43,  47,  48,  51,
 55,  58,  62,  66,  70,  74,  78,  82,
 86,  90,  91,  93,  96,  99, 102, 106,
 111, 115, 119, 123, 127, 131, 135, 139,
 143, 146, 150, 154, 158, 163, 168, 172,
 176, 180, 184, 188, 193, 197, 202, 207,
 212, 217, 221, 223, 227, 229, 232, 236
};
#endif	// __FONT8X5_H

/*
  Character widths:
  1, 1, 3, 5, 4, 5, 5, 1,
  3, 3, 5, 5, 2, 4, 1, 3, 
  4, 3, 4, 4, 4, 4, 4, 4,
  4, 4, 1, 2, 3, 3, 3, 4,
  5, 4, 4, 4, 4, 4, 4, 4,
  4, 3, 4, 4, 4, 5, 5, 4,
  4, 4, 4, 4, 5, 4, 5, 5,
  5, 5, 4, 2, 4, 2, 3, 4
*/
